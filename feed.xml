<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://leeyh0216.github.io/</id><title>leeyh0216's devlog</title><subtitle></subtitle> <updated>2024-07-14T17:47:06+09:00</updated> <author> <name>leeyh0216</name> <uri>https://leeyh0216.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://leeyh0216.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko-KR" href="https://leeyh0216.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2024 leeyh0216 </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>JVM Heap과 GC를 다른 관점에서 바라보기</title><link href="https://leeyh0216.github.io/posts/heap-and-gc/" rel="alternate" type="text/html" title="JVM Heap과 GC를 다른 관점에서 바라보기" /><published>2024-07-14T17:00:00+09:00</published> <updated>2024-07-14T17:00:00+09:00</updated> <id>https://leeyh0216.github.io/posts/heap-and-gc/</id> <content src="https://leeyh0216.github.io/posts/heap-and-gc/" /> <author> <name>leeyh0216</name> </author> <summary> 개요 Garbage Collection을 검색해보면 대부분의 글이 특정 GC(CMS, G1, Z 등)의 배경이 되는 이론(ex. Generational Collection Theory)이나, 알고리즘(ex. Mark-Sweep), 튜닝 등에 대한 내용을 다루고 있다. 그리고 해당 이론에 근거하여 Heap 메모리의 구조를 설명하다보니, Heap 영역을 Eden, Old, Perm 등으로 나누어 생각하는 것이 일반화된 것 같다. 최근에 JVM 밑바닥까지 파헤치기 라는 책을 읽다가 다음과 같은 문장을 읽었다. 이 영역 구분(Eden, Survivor 등)은 가비지 컬렉터들의 일반적인 특성 또는 설계 방식일 뿐, 반드시 이 형태로 메모리를 구성해야 한다는 뜻은 아니라는 점이다. «자바 가상 머신 명... </summary> </entry> <entry><title>protobuf 2.5 빌드하기(Apple Silicon)</title><link href="https://leeyh0216.github.io/posts/protobuf_2_5_build/" rel="alternate" type="text/html" title="protobuf 2.5 빌드하기(Apple Silicon)" /><published>2024-03-10T12:10:00+09:00</published> <updated>2024-03-10T12:10:00+09:00</updated> <id>https://leeyh0216.github.io/posts/protobuf_2_5_build/</id> <content src="https://leeyh0216.github.io/posts/protobuf_2_5_build/" /> <author> <name>leeyh0216</name> </author> <summary> 이 문제는 Apple Silicon(M1, M2, M3 등)에서만 발생합니다. Ubuntu나 Intel Mac에서는 발생하지 않을 수 있음을 유의하시기 바랍니다. Hadoop 3.2.2 버전을 빌드하려다보니, 아래와 같은 메시지가 발생하며 빌드에 실패하였다. [ERROR] Failed to execute goal org.apache.hadoop:hadoop-maven-plugins:3.2.2:protoc (compile-protoc) on project hadoop-yarn-api: org.apache.maven.plugin.MojoExecutionException: 'protoc --version' did not return a version -&amp;gt; [Help 1] protoc가 없... </summary> </entry> <entry><title>데이터 엔지니어를 위한 CMU Intro to Database Systems#2</title><link href="https://leeyh0216.github.io/posts/cmu_intro_to_database_2/" rel="alternate" type="text/html" title="데이터 엔지니어를 위한 CMU Intro to Database Systems#2" /><published>2023-12-22T11:00:00+09:00</published> <updated>2023-12-22T11:00:00+09:00</updated> <id>https://leeyh0216.github.io/posts/cmu_intro_to_database_2/</id> <content src="https://leeyh0216.github.io/posts/cmu_intro_to_database_2/" /> <author> <name>leeyh0216</name> </author> <summary> Lecture #10: Sorting &amp;amp; Aggregation Algorithms 참고자료: Youtube - F2023 #10 - Sorting &amp;amp; Aggregation Algorithms (CMU Intro to Database Systems) Query Plan SQL문을 실행하면, DBMS는 쿼리를 Compile하여 Query Plan으로 변환한다. Query Plan은 Operator(Relational Operator)로 구성된 Tree를 의미한다. SELECT R.id, S.cdate FROM R JOIN S ON R.id = S.id WHERE S.value &amp;gt; 100 위의 쿼리문을 실행하면, RDBMS는 쿼리를 아래의 Relational Algebra로 변... </summary> </entry> <entry><title>데이터 엔지니어를 위한 CMU Intro to Database Systems#1</title><link href="https://leeyh0216.github.io/posts/cmu_intro_to_database_1/" rel="alternate" type="text/html" title="데이터 엔지니어를 위한 CMU Intro to Database Systems#1" /><published>2023-12-21T18:00:00+09:00</published> <updated>2023-12-21T18:00:00+09:00</updated> <id>https://leeyh0216.github.io/posts/cmu_intro_to_database_1/</id> <content src="https://leeyh0216.github.io/posts/cmu_intro_to_database_1/" /> <author> <name>leeyh0216</name> </author> <summary> 들어가며 2014년 2학기에 데이터베이스 개론을 수강했던 기억이 있다. 당시에는 개념적인 것보다 실제 동작하는 프로그램에 RDBMS를 연동하여 결과를 얻어내는 것에 더 관심이 있었다. 그러나 몇년 간 데이터 엔지니어 업무를 수행하다보니, 최적화를 위해서는 엔진 내부에 대한 이해가 중요하다는 결론이 내려졌다. 내가 다루는 엔진이 대부분 분산 데이터베이스 엔진이기는 하지만, 기본적인 개념은 일반 데이터베이스를 구성하는 이론과 크게 차이가 없는 것을 확인하였다. 어떤 자료를 통해 공부할지 고민하다가 카네기 멜론 대학교의 “CMU Intro to Database Systems”와 “CMU Advanced Database Systems” 강의를 듣기로 마음먹었다. 시간이 좀 많으면 모든 Lecture를 다... </summary> </entry> <entry><title>Trino Summit 2023 발표 회고</title><link href="https://leeyh0216.github.io/posts/trino-summit-2023/" rel="alternate" type="text/html" title="Trino Summit 2023 발표 회고" /><published>2023-12-16T18:00:00+09:00</published> <updated>2023-12-16T18:00:00+09:00</updated> <id>https://leeyh0216.github.io/posts/trino-summit-2023/</id> <content src="https://leeyh0216.github.io/posts/trino-summit-2023/" /> <author> <name>leeyh0216</name> </author> <summary> Trino Summit 2023 2023년 12월 13 ~ 14일(한국 기준 14 ~ 15일)에 Trino Summit 2023이 온라인에서 열렸다. Trino 블로그에도 Trino Summit 2023 nears with an awesome lineup에 “SK Telecom: Unstructured data analysis using polymorphic table functions in Trino” 이라는 제목으로 소개되어 있다. 2023년 12월 16일 18시 기준 Youtube Trino 채널에 Trino Summit 2023에서 발표한 영상 1개가 올라온걸 봐서는, 다음주 중에는 내가 발표한 내용도 올라올 것 같긴 하다. 발표하게 된 계기부터 준비 과정, 발표일 당일의 에피소드까지 남... </summary> </entry> </feed>
